#include<iostream>
using namespace std;
void selectionSort(int a[], int n) {
    for(int i=0; i<n-1; i++) {
        int minIdx=i;
        for(int j=i+1; j<n; j++) {
            if(a[j]<a[minIdx]) minIdx=j;
        }
        swap(a[i], a[minIdx]);
    }
}

void insertionSort(int a[], int n) {
    for(int i=1; i<n; i++) {
        int key=a[i], j=i-1;
        while(j>=0 && a[j]>key) {
            a[j+1]=a[j];
            j--;
        }
        a[j+1]=key;
    }
}

void bubbleSort(int a[], int n) {
    for(int i=0; i<n-1; i++) {
        bool swapped=false;
        for(int j=0; j<n-i-1; j++) {
            if(a[j]>a[j+1]) {
                swap(a[j], a[j+1]);
                swapped=true;
            }
        }
        if(!swapped) break;
    }
}

int partition(int a[], int low, int high) {
    int pivot=a[high], i=low-1;
    for(int j=low; j<high; j++) {
        if(a[j]<=pivot) {
            i++;
            swap(a[i], a[j]);
        }
    }
    swap(a[i+1], a[high]);
    return i+1;
}
void quickSort(int a[], int low, int high) {
    if(low<high) {
        int pi=partition(a, low, high);
        quickSort(a, low, pi-1);
        quickSort(a, pi+1, high);
    }
}

void merge(int a[], int left, int mid, int right) {
    int n1=mid-left+1, n2=right-mid;
    int L[n1], R[n2];
    
    for(int i=0; i<n1; i++) L[i]=a[left+i];
    for(int i=0; i<n2; i++) R[i]=a[mid+1+i];
    
    int i=0, j=0, k=left;
    while(i<n1 && j<n2) {
        if(L[i]<=R[j]) a[k++]=L[i++];
        else a[k++]=R[j++];
    }
    
    while(i<n1) a[k++]=L[i++];
    while(j<n2) a[k++]=R[j++];
}
void mergeSort(int a[], int left, int right) {
    if(left<right) {
        int mid=left+(right-left)/2;
        mergeSort(a, left, mid);
        mergeSort(a, mid+1, right);
        merge(a, left, mid, right);
    }
}



int main(){
}
